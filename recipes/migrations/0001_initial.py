# Generated by Django 5.2.5 on 2025-08-07 05:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_chef', models.BooleanField(default=False, help_text='Check if the user is a chef.')),
                ('bio', models.TextField(blank=True, help_text='Short biography or introduction about the user.', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the recipe.', max_length=100)),
                ('description', models.TextField(help_text='Provide a short description of the recipe.')),
                ('cuisine', models.CharField(choices=[('indian', 'Indian'), ('italian', 'Italian'), ('chinese', 'Chinese'), ('mexican', 'Mexican'), ('other', 'Other')], help_text='Select the cuisine category for the recipe.', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], help_text='Select how difficult the recipe is to prepare.', max_length=10)),
                ('veg_type', models.CharField(choices=[('veg', 'Vegetarian'), ('non_veg', 'Non-Vegetarian'), ('vegan', 'Vegan')], help_text='Choose the vegetarian type of the recipe (veg, non-veg, vegan).', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the recipe was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the recipe was last updated.')),
                ('author', models.ForeignKey(help_text='The user who created this recipe.', on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the ingredient.', max_length=100)),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity of the ingredient required for the recipe.', max_digits=10)),
                ('unit', models.CharField(choices=[('g', 'Grams'), ('kg', 'Kilograms'), ('ml', 'Milliliters'), ('l', 'Liters'), ('tsp', 'Teaspoon'), ('tbsp', 'Tablespoon'), ('cup', 'Cup'), ('pcs', 'Pieces')], help_text='Measurement unit for the ingredient.', max_length=10)),
                ('optional', models.BooleanField(default=False, help_text='Check if the ingredient is optional.')),
                ('recipe', models.ForeignKey(help_text='The recipe to which this ingredient belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='recipes.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the collection.', max_length=100)),
                ('user', models.ForeignKey(help_text='The user who owns this collection.', on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL)),
                ('recipes', models.ManyToManyField(help_text='Recipes included in this collection.', related_name='collections', to='recipes.recipe')),
            ],
        ),
    ]
